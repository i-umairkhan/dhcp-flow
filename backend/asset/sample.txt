// // prints all the pods with the given label and namespace
// func getPods(client *kubernetes.Clientset, namespace, label string) {
// 	pods, err := client.CoreV1().Pods(namespace).List(context.Background(), metav1.ListOptions{
// 		LabelSelector: label,
// 	})
// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	for _, pod := range pods.Items {
// 		fmt.Println(pod.Name)
// 	}
// }

// prints all the config maps with the given label and namespace
// func getConfigMaps(client *kubernetes.Clientset, namespace, label string) {
// 	configMaps, err := client.CoreV1().ConfigMaps(namespace).List(context.Background(), metav1.ListOptions{
// 		LabelSelector: label,
// 	})

// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	fmt.Println(configMaps.Items)
// }

// var DB *sql.DB

// func initDB() {
// 	var err error
// 	DB, err = sql.Open("sqlite3", "./app.db") // Open a connection to the SQLite database file named app.db
// 	if err != nil {
// 		log.Fatal(err) // Log an error and stop the program if the database can't be opened
// 	}

// 	// SQL statement to create the todos table if it doesn't exist
// 	sqlStmt := `
// 	CREATE TABLE IF NOT EXISTS todos (
// 	 id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
// 	 title TEXT
// 	);`

// 	_, err = DB.Exec(sqlStmt)
// 	if err != nil {
// 		log.Fatalf("Error creating table: %q: %s\n", err, sqlStmt) // Log an error if table creation fails
// 	}
// }

// setting kubeconfig path
// currentDir, _ := os.Getwd()
// kubeConfigPath := filepath.Join(currentDir, "kubeconfig.yaml")

// // get current context
// config, err := clientcmd.BuildConfigFromFlags("", kubeConfigPath)
// if err != nil {
// 	panic(err.Error())
// }

// // creating client
// client := kubernetes.NewForConfigOrDie(config)

// namespace := "default"
// label := "app=kea-dhcp4"

// getPods(client, namespace, label)
// getConfigMaps(client, namespace, label)
